h1. Expressions

This is incomplete.

TBD: TYPE, NAME (any syntactically-valid symbol)


Function definition:
  PARAM := TYPE NAME
  PARAMS := [ PARAM [ "," PARAM ]* ]
  


A function call is defined as:
  IN_PARAMS := [ EXPRESSION [ "," EXPRESSION ]* ]
  FUNC_CALL := FUNCTION "(" IN_PARAMS ")"
            || EXPRESSION BIN_OP EXPRESSION
            || EXPRESSION POST_OP
            || PRE_OP EXPRESSION
            || CTOR
TODO: statement notation (if, foreach, switch, ...)? Should these take an EXPRESSION or a STATEMENT, or a FUNCTION?

An expression is a function call (or nothing):
  EXPRESSION := LITERAL || FUNC_CALL
A statement is "a line of code": an expression who's return value (if any) is ignored, which is syntactically self-contained.
None: ASSEMBLY could by part of BLOCK instead.
  STATEMENT := (EXPRESSION || ASSEMBLY || ()) ";"	// "()" is nothing − an empty statement

A block is a list of [0,inf) expressions:
  BLOCK := "{" STATEMENT * "}"


Any system needs fundamental building blocks, or atoms. The atomic functions have the following prototypes:
@//Standard arithmatic, where T is one of ... (some atomic types), OP is one of "plus" || "minus" || "multiply" || "divide" || "modulus" || ... (check what makes sense):
  T lang.OP (T NAME, T NAME);
//Vector operations, where TV is ... (some vector types), OP is ... (some vector ops):
@


Possible examples:
@  template(T) T if (Bool cond, T tVal, T fVal) {...}	// D
  T if(T) (Bool cond, T tVal, T fVal) {...}	// D
  
  
  x = if (cond, 1, 0);	// possible with different name in C/C++/D where type of 1,0 is a non-function type
  x = if (cond, 1;, 0;);
  x = if (cond) 1 else 0;
  x = if (cond)
	1;
      else
	0;
      ;
  x = if (cond) 1;
      else 0;
  x = if (cond)
	{1;}
      else
	{0;}
      ;
  x = if (cond) {1;}
      else {0;}
@

<hr>

Copyright © Diggory Hardy 2009

Distributed under the Boost Software License, Version 1.0. (See accompanying file "../LICENSE_1_0.txt":LICENSE_1_0.txt or copy at "http://www.boost.org/LICENSE_1_0.txt":http://www.boost.org/LICENSE_1_0.txt)
