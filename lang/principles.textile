h1. mo language specification

h4. Design principles

 * Low-level optimisation is the computer's job, not the programmers.
 * Syntax should not get in the way of _language_; however it is required to make statements explicit (i.e. concise statements are better).
 * Functionality within the language itself should be minimal, while allowing required features.
 * aim for flexibility: as much functionality as possible, while respecting other principles and within reason, is not in the compiler but in the language itself
 * try to allow syntax similar to many common languages to be implemented according to the language's rules; e.g. users could write an if function which can be used like a C if statement, or a function to be used like a lisp if function:
 ** if (cond) XXX [else YYY]
 ** (if cond XXX [YYY])
 * aim to allow natural and familiar syntax, when non-ambiguous; need to consider this against generality
 * no keyword should be re-used with a different meaning/purpose (e.g. "static" in C++ as it applies to arrays, variable storage and non-member functions).
 * avoid writing code twice (or unnecessarily): declarations often not needed, type can sometimes be determined from function return type


h4. Library design

 * Aim for three things:
 ** easy usage
 ** powerful/flexible usage
 ** efficiency
 * For each feature, try to provide examples of both simple usage and more flexible usage. E.g.:

<pre><code>
    /// Create a window which is automatically closed on program exit:
    createWindow().open();
    
    // Step-by-step:
    auto w = createWindow();
    w.setTitle (...);
    w.open();
    ...
    w.close();	// called implicitly at scope close, so not usually necessary to call explicitly
</code></pre>


h4. Tool design

 * Running the build-tool should have exactly the same effect (with regards to binary output & error messages (excepting order of error messages)) regardless of whether you're starting from a clean build or not.
 ** Object files are purely caches for performance improvement
** Embed compiler & ABI version in object files in case of bugs/ABI changes
** Warnings − reprint from already-compiled code? Maybe not important.

<hr>

Copyright © Diggory Hardy 2009

Distributed under the Boost Software License, Version 1.0. (See accompanying file "LICENSE_1_0.txt":../LICENSE_1_0.txt or copy at "http://www.boost.org/LICENSE_1_0.txt":http://www.boost.org/LICENSE_1_0.txt)
